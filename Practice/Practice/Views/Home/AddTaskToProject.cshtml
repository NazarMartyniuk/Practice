@model Practice.Models.AddTaskToProjectViewModel

<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script>
    $(document).ready(function () {
        $('#CreationDate').prop('disabled', true);
    });
</script>

<div class="page-header">
    <h1>Add New Task to @Model.ProjectName</h1>
</div>

<div class="bs-component">
    <div class="well col-lg-12 col-md-12 col-sm-12">
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <span class="close" data-dismiss="alert">×</span>
                <ul>
                    @foreach (var key in @ViewData.ModelState.Keys)
                    {
                        foreach (var err in ViewData.ModelState[key].Errors)
                        {
                            <li>@err.ErrorMessage</li>
                        }
                    }
                </ul>
            </div>
        }
        <div class="col-lg-6 col-md-6 col-sm-6">
            @using (Html.BeginForm("AddTaskToProject", "Home", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(x => x.ProjectId)
                @Html.HiddenFor(x => x.Watchers)
                @Html.HiddenFor(x => x.Workers)
                <fieldset>
                    <div class="row">
                        <div class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4 control-label">
                                @Html.LabelFor(model => model.Name)
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 form-control-static">
                                @Html.TextAreaFor(model => model.Name, new { @class = "form-control", rows = 1, style = "resize: none" })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4 control-label">
                                @Html.LabelFor(model => model.Description)
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 form-control-static">
                                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 25, style = "resize: none" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4 control-label">
                                @Html.LabelFor(model => model.Type)
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 form-control-static">
                                @Html.EnumDropDownListFor(model => model.Type, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4 control-label">
                                @Html.LabelFor(model => model.Priority)
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 form-control-static">
                                @Html.EnumDropDownListFor(model => model.Priority, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4 control-label">
                                @Html.LabelFor(model => model.CreationDate)
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 form-control-static">
                                @Html.EditorFor(model => model.CreationDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CreationDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4 control-label">
                                @Html.LabelFor(model => model.ExpirationDate)
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 form-control-static">
                                @Html.EditorFor(model => model.ExpirationDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ExpirationDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4 control-label">
                                <label>Attachments</label>
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 form-control-static">
                                <div class="btn-toolbar form-control-static">
                                    <label for="files" class="btn btn-primary">Select Files</label>
                                    <input id="files" name="files" style="visibility:hidden;width:1px;height:1px;margin:-1px;" type="file" multiple="" />
                                    <button class="btn btn-primary" role="button" type="button" id="clearFiles">Clear</button>
                                </div>
                            </div>
                            <div class="col-lg-7 col-md-7 col-sm-7 form-control-static">
                                <div id="filespreview" class="bs-component">
                                    <p>No Files selected</p>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4 control-label">
                                <label>Watcher</label>
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 form-control-static">
                                @Html.DropDownListFor(model => model.WatcherId, Model.Watchers, "---", new { required = "yes" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4 control-label">
                                <label>Worker</label>
                            </div>
                            <div class="col-lg-8 col-md-8 col-sm-8 form-control-static">
                                @Html.DropDownListFor(model => model.WorkerId, Model.Workers, "---", new { required = "yes" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4 col-lg-offset-4 col-md-offset-4 col-sm-offset-4">
                                <div class="btn-toolbar form-control-static">
                                    <button class="btn btn-primary" type="submit">Submit</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>
            }
        </div>
    </div>
</div>

@section scripts{
    <script src="@Url.Content("~/Scripts/TaskAttachment.js")" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            var input = document.getElementById('files');
            var preview = document.getElementById('filespreview');
            handleFiles(input, preview, '#clearFiles');
        });
    </script>
}